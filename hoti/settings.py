"""
Django settings for influencer project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
TOKEN_EXPIRY_IN_SEC = os.getenv('TOKEN_EXPIRY_IN_SEC')


CORS_ORIGIN_ALLOW_ALL = True

GDAL_LIBRARY_PATH = os.environ.get('GDAL_LIBRARY_PATH')
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-5_%!8441#rsa6ho&nij=f#0(5f56(1=)v@utbtjn)r%v**2&4^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

CORS_ORIGIN_ALLOW_ALL = True


CORS_ORIGIN_WHITELIST = (
    "http://127.0.0.1:5173",
"http://localhost:5173",
"http://3.110.28.115:8000",
"http://localhost:8000",
#"https://staging-api.hoti.io",
"https://gh-pages.d3ejkvwyrrpa9q.amplifyapp.com/"
)


CORS_ALLOW_METHODS = (
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
    'HEAD'
)

CORS_ALLOW_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'origin',
    'authorization',
    'x-csrftoken'
)

CORS_EXPOSE_HEADERS = (
    'x-requested-with',
    'content-type',
    'accept',
    'authorization',
    'x-csrftoken'
)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework.authtoken',
    'django_extensions',

    'rest_framework',
    'corsheaders',
    'django.contrib.gis',
    'storages',

    'accounts',
    'customtokens',
    'phonenumbers',
    'master',
    'Mobile',

    'allauth',
    'allauth.account',
    'rest_auth.registration',

    'django.contrib.sites',

    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    # 'allauth.socialaccount.providers.google',

    'rest_auth',
    'admindashboard'

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'hoti.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'hoti.wsgi.application'
ENV_ = os.getenv('ENV','local')
if ENV_ == 'cloud_local':
    db_host = 'localhost'
else:
    db_host = '3.110.28.115'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        #'ENGINE': 'django.db.backends.postgresql',
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': db_host,
        'PORT': '5432',
    }
}

#https://staging-api.hoti.io/users/

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ),

    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',  # Add this line

    ],

    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    },
    'DEFAULT_TOKEN_MODEL': 'customtokens.CustomToken',
    'DEFAULT_AUTHENTICATION_TOKEN_EXPIRY': 86400,

}

# AWS Credentials
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')


# Tell django-storages the domain to use to refer to static files.
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME

# Tell the staticfiles app to use S3Boto3 storage when writing the collected static files (when you run `collectstatic`).
STATICFILES_LOCATION = 'static'
# STATICFILES_STORAGE = 'accounts.custom_class.StaticStorage'
# STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATICFILES_LOCATION)

# Tell the media app to use S3Boto3 storage when writing the user uploaded files.
MEDIAFILES_LOCATION = 'media'
DEFAULT_FILE_STORAGE =  'accounts.custom_class.MediaStorage'
MEDIA_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, MEDIAFILES_LOCATION)


STATICFILES_DIRS = [
    BASE_DIR / "static",
    BASE_DIR / "templates", # add this line to serve static files for templates
]

STATIC_URL = '/static/'





# Facebook app ID and app secret
FACEBOOK_APP_ID=265361172511568
FACEBOOK_APP_SECRET='3a8bd373f8f2f342c71709446b59117d'
# SECURE_SSL_REDIRECT = True


# Facebook configuration
SOCIAL_AUTH_FACEBOOK_KEY = int(FACEBOOK_APP_ID)
SOCIAL_AUTH_FACEBOOK_SECRET = str(os.getenv('FACEBOOK_SECRET_KEY'))
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
# Define SOCIAL_AUTH_FACEBOOK_SCOPE to get extra permissions from facebook. Email is not sent by default, to get it, you must request the email permission:
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
'fields': 'id, name, email' }
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
FACEBOOK_EXTENDED_PERMISSIONS = ['email']
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
SOCIAL_AUTH_PIPELINE = (
'social_core.pipeline.social_auth.social_details',
'social_core.pipeline.social_auth.social_uid',
'social_core.pipeline.social_auth.auth_allowed',
'social_core.pipeline.social_auth.social_user',
'social_core.pipeline.user.get_username',
'social_core.pipeline.social_auth.associate_by_email',
'social_core.pipeline.user.create_user',
'social_core.pipeline.social_auth.associate_user',
'social_core.pipeline.social_auth.load_extra_data',
'social_core.pipeline.user.user_details', )


SITE_ID = 4

# settings.py

from django.core.management.utils import get_random_secret_key

SECRET_KEY = get_random_secret_key()

SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # or any other desired session engine
SESSION_COOKIE_SECURE = False  # Set it to True if using HTTPS
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Set it to True if you want sessions to expire on browser close
SESSION_COOKIE_AGE = 3600  # Set the desired session duration in seconds



cometchat_headers = {
        "apiKey": "91114cd16a68dfa26a45166c7c77fd58eb63ef68",
        "Content-type":"application/json",
        "Accept": "application/json"
    }

cometchat_api_version = "v3"

cometchat_base_url = "https://24039741da4ec2a8.api-us.cometchat.io/"

